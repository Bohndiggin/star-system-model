(()=>{var t={637:t=>{const i=6.67384*Math.pow(10,-11),e=(Math.pow(10,-8),373.15),s=(Math.pow(10,30),Math.pow(10,26),Math.pow(10,23),5.9722*Math.pow(10,24));Math.pow(10,22),Math.pow(10,27),Math.pow(10,23);class a{constructor(t,i,e,s,a,o,n,r,d,h){this.minTemp=t,this.maxTemp=i,this.className=e,this.minMass=s,this.maxMass=a,this.minRadius=o,this.maxRadius=n,this.minLumens=r,this.maxLumens=d,this.frequency=h}}const o=[new a(3e4,1e6,"O",16,20,6.6,8,3e4,5e4,.03),new a(1e4,3e4,"B",2.1,16,1.8,3e4,25,.25),new a(7500,1e4,"A",1.4,2.1,1.4,1.8,5,25,.85),new a(6e3,7500,"F",1.04,1.4,1.15,1.4,1.5,5,3.85),new a(5200,6e3,"G",.8,1.04,.96,1.15,.6,1.5,10),new a(3700,5200,"K",.45,.8,.7,.96,.08,.6,22.1),new a(2400,3700,"M",.08,.45,1e-5,.07,1e-5,.08,100)];class n{constructor(t,i,e){this.minTemp=t,this.maxTemp=i,this.planetType=e}}const r=[new n(0,50,"cold"),new n(50,100,"chilly"),new n(100,200,"brisky"),new n(200,275,"frozen"),new n(275,300,"earth-like"),new n(300,e,"desert-world"),new n(e,450,"boiling"),new n(450,600,"lava-world"),new n(600,1/0,"hell-world")],d=[new n(0,50,"cold"),new n(50,100,"chilly"),new n(100,200,"brisky"),new n(200,275,"frozen"),new n(275,300,"ocean"),new n(300,e,"Hot-Ocean")],h=[new n(0,50,"cold"),new n(50,100,"chilly"),new n(100,200,"brisky"),new n(200,275,"frozen"),new n(275,300,"rust-world"),new n(300,e,"pot-world"),new n(e,450,"boiling"),new n(450,600,"stovetop"),new n(600,1200,"oven-world"),new n(1200,1/0,"tartarus")];t.exports={ranDumb:(t,i)=>Math.random()*(i-t)+t,getRandomColor:()=>{for(var t={num:"0x",hex:"#"},i=0;i<6;i++){let i="0123456789ABCDEF"[Math.floor(16*Math.random())];t.num+=i,t.hex+=i}return t.num=+t.num,t},makeSGP:(t,e)=>i*(t+e),AUConvert:t=>t*Math.pow(1.496,-11),calcOrbitalSpeed:(t,i,e)=>1e3*Math.sqrt(makeSGP(t,i)/e),calcOrbitalSpeedKmps:(t,i,e)=>{let s=calcOrbitalSpeed(t,i,e);return s/=3.154*Math.pow(10,7),s},calcOrbitalPeriod:(t,i,e)=>{let s=calcOrbitalSpeed(t,i,e);return 2*Math.PI*e/s*366},calcGravitationalForce:(t,e,s)=>i*((t+e)/Math.pow(s,2)),calcStarRadius:t=>Math.pow(t,.8),calcStarLuminosity:t=>t/5772,calcHabitableZone:(t,i)=>{let e=1/(2*Math.pow(175/t/Math.pow(.7,1/4),2)/i);return[1/(2*Math.pow(300/t/Math.pow(.7,1/4),2)/i),e]},classifyStar:t=>{for(let i=0;i<o.length;i++)if(t>=o[i].minTemp&&t<o[i].maxTemp)return`It's a ${o[i].className}-Class Star!`},calcBodyTempSolar:(t,i,e)=>t*Math.sqrt(i/(2*e))*Math.pow(.7,1/4),clacBodyComposition:()=>{let t={},i=ranDumb(1,100),e=ranDumb(1,100),s=ranDumb(1,100);return t.ice=i/(i+e+s)*100,t.rock=e/(i+e+s)*100,t.metal=s/(i+e+s)*100,t},calcBodyTypeFirstPass:(t,i,e)=>{let s="";if(e.ice>e.rock&&e.ice>e.metal?s+="icy_":e.rock>e.ice&&e.rock>e.metal?s+="rocky_":e.metal>e.ice&&e.metal>e.rock?s+="metalic_":s+="It's Complicated","icy_"===s)for(let i=0;i<d.length;i++)t>d[i].minTemp&&t<d[i].maxTemp&&(s+=d[i].planetType);if("rocky_"===s)for(let i=0;i<r.length;i++)t>r[i].minTemp&&t<r[i].maxTemp&&(s+=r[i].planetType);if("metalic_"===s)for(let i=0;i<h.length;i++)t>=h[i].minTemp&&t<h[i].maxTemp&&(s+=h[i].planetType);return s},calcBodyTypeSecondPass:t=>"somethin else",calcBodyAtmosphere:(t,i,e)=>!1,calcBodyTempAtmosphere:(t,i)=>i?"gassy":t,calcIceBlast:t=>{if(t.temperature>e){t.bodyRadius-=t.bodyRadius*(t.composition.ice/100),t.composition.ice=0;let i=t.composition.rock/(t.composition.rock+t.composition.metal)*100,e=t.composition.metal/(t.composition.metal+t.composition.rock)*100;t.composition.rock=i,t.composition.metal=e}return t.bodyComposition},calcBodyMass:(t,i)=>{let e=0,s=4/3*Math.PI*Math.pow(t,3);return e+=s*(i.rock/100)*2515*1e3**3,e+=s*(i.ice/100)*919*1e3**3,e+=s*(i.metal/100)*8908*1e3**3,e},calcBodyGravity:(t,i)=>t/s/Math.pow(i/6371,2)}}},i={};function e(s){var a=i[s];if(void 0!==a)return a.exports;var o=i[s]={exports:{}};return t[s](o,o.exports,e),o.exports}(()=>{Math.pow(10,-11);const t=149597870,i=(Math.pow(10,-8),1.98847*Math.pow(10,30)),s=695700,a=(Math.pow(10,26),Math.pow(10,23),5.9722*Math.pow(10,24)),o=6371,{ranDumb:n,getRandomColor:r,makeSGP:d,AUConvert:h,calcOrbitalSpeed:l,calcOrbitalSpeedKmps:p,calcOrbitalPeriod:c,calcGravitationalForce:y,calcStarRadius:m,calcStarLuminosity:b,calcHabitableZone:u,classifyStar:M,calcBodyTempSolar:g,clacBodyComposition:f,calcBodyTypeFirstPass:S,calcBodyTypeSecondPass:w,calcBodyAtmosphere:A,calcBodyTempAtmosphere:x,calcIceBlast:C,calcBodyMass:T,calcBodyGravity:v}=(Math.pow(10,22),Math.pow(10,27),Math.pow(10,23),e(637));let I=0,R=[],E=(document.querySelector("display"),document.getElementById("addPlanet")),P=document.getElementById("listPlanets"),B=document.getElementById("bonk"),$=document.getElementById("ff"),L=document.getElementById("rv"),O=document.getElementById("bench"),j=document.getElementById("stat-display"),k=document.getElementById("edit"),U=document.getElementById("editStop"),H=10,G=.05,N=document.getElementById("play"),Z=document.getElementById("stop"),D=document.getElementById("row-map"),F=D.children,X=500,K=!1,q="http://localhost:4444";const z=new PIXI.Application({width:1e3,height:1e3,antialias:!0});document.getElementById("newCanvas").appendChild(z.view);class J{constructor(t,i,e,s,a,o,n,r,d,h){this.minTemp=t,this.maxTemp=i,this.className=e,this.minMass=s,this.maxMass=a,this.minRadius=o,this.maxRadius=n,this.minLumens=r,this.maxLumens=d,this.frequency=h}}const _=[new J(3e4,1e6,"O",16,20,6.6,8,3e4,5e4,.03),new J(1e4,3e4,"B",2.1,16,1.8,3e4,25,.25),new J(7500,1e4,"A",1.4,2.1,1.4,1.8,5,25,.85),new J(6e3,7500,"F",1.04,1.4,1.15,1.4,1.5,5,3.85),new J(5200,6e3,"G",.8,1.04,.96,1.15,.6,1.5,10),new J(3700,5200,"K",.45,.8,.7,.96,.08,.6,22.1),new J(2400,3700,"M",.08,.45,1e-5,.07,1e-5,.08,100)];function Y(){H=0}function V(){H=7}function Q(t){for(let t=0;t<R.length;t++)R[t].selected=!1;tt.showStarStats()}Z.addEventListener("click",Y),N.addEventListener("click",V),P.addEventListener("click",(function(){let t=planetBoxEle.children;console.log(t),console.log()})),B.addEventListener("click",bonk);class W{constructor(i){this.starOrbiting=i,this.eccentricity=n(.001,.999),this.bodyRadius=n(600,9999),this.bodyComposition=f(),this.bodyComposition=C(this),this.bodyMass=T(this.bodyRadius,this.bodyComposition),this.bodyEarthMasses=this.bodyMass/a,this.sGP=d(this.bodyMass,this.starOrbiting.starKgMass);let e=.005*t*(this.starOrbiting.temperature/5772),s=7*t*(this.starOrbiting.temperature/5772);this.bodySemiMajorAxis=n(e,s),this.bodySemiMajorAxisAU=this.bodySemiMajorAxis/t,this.bodySemiMinorAxis=this.bodySemiMajorAxis*Math.sqrt(1-this.eccentricity**2),this.bodyVelocity=p(this.bodyMass,this.starOrbiting.starKgMass,this.bodySemiMajorAxis),this.angularMomentum=this.bodyMass*this.bodyVelocity*this.bodySemiMajorAxis,this.specificAngularMomentum=this.angularMomentum/this.bodyMass,this.bodyRotationPeriod="wizard MATH",this.bodyOrbitalPeriod=c(this.bodyMass,this.starOrbiting.starKgMass,this.bodySemiMajorAxis),this.bodyTemperature=g(this.starOrbiting.temperature,this.starOrbiting.starKmRadius,this.bodySemiMajorAxis),this.bodyType=S(this.bodyTemperature,this.bodyRadius,this.bodyComposition),this.bodyAtmosphere=A(this.bodyTemperature,this.bodyType,this.bodySemiMajorAxis),this.bodyTemperature=x(this.bodyTemperature,this.bodyAtmosphere),this.bodyParameter=this.specificAngularMomentum**2/this.sGP,this.bodyPeriapsis=this.bodySemiMajorAxis*(1-this.eccentricity),this.bodyApoapsis=this.bodySemiMajorAxis*(1+this.eccentricity),this.bodyF=this.bodySemiMajorAxis*this.eccentricity,this.bodyOrbitalPeriod=2*Math.PI*Math.sqrt(this.bodySemiMajorAxis**3/this.sGP),this.bodyMoons=0,this.bodyRings=0,this.bodyGravity=v(this.bodyMass,this.bodyRadius);let h=D;this.planetColor=r(),this.planetX=document.createElement("div"),this.bodyName=`planet${I}`,this.planetX.setAttribute("id",this.bodyName),this.planetX.setAttribute("class","planet"),h.appendChild(this.planetX),F[I+1].style.background=this.planetColor.hex,this.displayRadius=this.bodySemiMajorAxisAU*G,this.bodyDisplayRadius=.009157682909299986*this.bodyRadius*G,this.offset=500,this.orbitalSpeed=365/this.bodyOrbitalPeriod,this.planetHTML=document.getElementById(this.bodyName),this.bodyXOrbitJourney=0,this.bodyYOrbitJourney=0,this.bodyXLocation=500,this.bodyYLocation=500,this.bodyCurrTemp=0,this.cease=!1,this.bodyRadiusEarth=this.bodyRadius/o,this.bodyLocations=[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],this.display=new PIXI.Graphics,this.display.lineStyle(0),this.display.beginFill(this.planetColor.num),this.display.drawCircle(0,0,this.bodyDisplayRadius),this.display.interactive=!0,this.display.buttonMode=!0,this.display.filters=[new PIXI.filters.GlowFilter({distance:10,outerStrength:0})],this.display.endFill(),this.display.on("pointerdown",it),this.display.on("pointerup",et),this.display.on("pointerupoutside",et),this.display.on("pointermove",st),z.stage.addChild(this.display),document.getElementById(this.bodyName).addEventListener("click",(function(){!function(t){let i=null;for(let e=0;e<R.length;e++)if(R[e].bodyName===t.id){i=R[e];break}for(let t=0;t<R.length;t++)R[t].selected=!1;i.selected=!0,i.presentInfo()}(this)})),console.log(this.bodyName);let l={stagedSMA:this.bodySemiMajorAxis,stagedSMAAU:this.bodySemiMajorAxisAU,stagedName:this.bodyName,stagedRadius:this.bodyRadius,stagedEcc:this.eccentricity,stagedTemp:this.bodyTemperature,stagedType:this.bodyType};axios.get(q+"/api/starNumGet/").then((t=>{this.starOrbiting.starNum=t.data[0].count,l.stagedStarNum=+t.data[0].count,axios.post(q+"/api/planetAdd",l).then((t=>{let i={s:l.stagedStarNum,p:+t.data[0].count};axios.post(q+"/api/star-system",i).then((t=>{})).catch((t=>console.log(t)))})).catch((t=>console.log("error on planet Gen: "+t)))})).catch((t=>console.log("error"+t))),I++}updateTemperature(t){this.bodyCurrTemp=g(this.starOrbiting.temperature,this.starOrbiting.starKmRadius,t)}updateLocation(){this.displayXRadius=this.bodySemiMajorAxisAU*(1-this.eccentricity**2)/(1+this.eccentricity*Math.cos(this.bodyXOrbitJourney)),this.currBodyDistance=this.bodySemiMajorAxisAU*(1-this.eccentricity**2)/(1+this.eccentricity*Math.cos(this.bodyXOrbitJourney)),this.currBodySpeed=Math.sqrt(this.sGP*(2/this.currBodyDistance-1/this.bodySemiMajorAxisAU))/X*H/100,this.bodyXOrbitJourney+=this.currBodySpeed/t,this.bodyXLocation=(this.bodySemiMajorAxis*Math.cos(this.bodyXOrbitJourney)-this.bodyF)/t*X*G+this.offset,this.bodyYLocation=this.bodySemiMinorAxis*Math.sin(this.bodyXOrbitJourney)/t*X*G+this.offset,this.bodyLocations.shift(0),this.bodyLocations.push([this.bodyXLocation,this.bodyYLocation]),this.dragging||(this.display.position.x=this.bodyXLocation,this.display.position.y=this.bodyYLocation),this.updateTemperature(this.currBodyDistance*t),this.presentInfo()}presentInfo(){if(this.selected)if(K){let i,e,s,n=null;this.editable=[{slider:{var:e,str:"eccentricity-slider"},input:{var:i,str:"ecc-input"}},{slider:{var:s,str:"sma-AU-slider"},input:{var:n,str:"sma-AU-input"}}];let r=`<h2 id="planetInfo">Planet Info</h2>\n                <h3 id="planetName">Name: ${this.bodyName}</h3>\n                <p id="planet type">Type: ${this.bodyType}</p>\n                <h4 id="planetPhysicalInfo">Physical Info:</h4>\n                <p id="planetComposition">Composition: ${this.bodyComposition}</p>\n                <p id="planetTemperature">Temperature: ${this.bodyTemperature}</p>\n                <p id="planetSizeEarths">Size (Relative to Earth): ${this.bodyRadius/o}</p>\n                <p id="planetMassKg">Mass (Kg): ${this.bodyMass}</p>\n                <p id="planetMassEarths">Earth Masses: ${this.bodyMass/a}</p>\n                <p id="planetG">Gravity: ${this.bodyGravity}</p>\n                <h4 id="orbitalInfo">Orbital Info:</h4>\n                <p id="semiMajorAxis">SemiMajorAxis: ${this.bodySemiMajorAxis}</p>\n                <p id="semiMajorAxisAU">SemiMajorAxisAU: ${this.bodySemiMajorAxisAU}</p>\n                <input type="range" name="semi-major-axis-AU" id="sma-AU-slider" min="0.001" max="10" value="${this.bodySemiMajorAxisAU}" step="0.1">\n                <label for="semi-major-axis-AU">semi-major-axis-AU</label>\n                <input type="text" id="sma-AU-input" name="semi-major-axis-AU" min="0.001" max="10" placeholder="${this.bodySemiMajorAxisAU}">\n                <p id="orbitalPeriod">Orbital Period (Earth Days): ${this.bodyOrbitalPeriod}</p>\n                <p>Apoapsis: ${this.bodyApoapsis}</p>\n                <p>Periapsis: ${this.bodyPeriapsis}</p>\n                <p>CUR ECC: ${this.eccentricity}</p>\n                <input type="range" name="eccentricity" id="eccentricity-slider" min="0.001" max="0.999" value="${this.eccentricity}" step="0.001">\n                <label for="eccentricity">eccentricity</label>\n                <input type="text" id="ecc-input" name="eccentricity" min="0.001" max="0.999" placeholder="${this.eccentricity}">\n                <p>CUR DIST: ${Math.floor(this.currBodyDistance*t)}</p>\n                <p>CURR TEMP: ${Math.floor(this.bodyCurrTemp)}</p>\n                <p>CURR SPD: ${Math.floor(this.currBodySpeed)}</p>\n                <label for="submit-changes">Submit Changes:</label>\n                <input type="button" value="Submit" id="submitChange" name="submit-changes">`;j.innerHTML=r;for(let t=0;t<this.editable.length;t++)this.editable[t].slider.var=document.getElementById(this.editable[t].slider.str),this.editable[t].input.var=document.getElementById(this.editable[t].input.str),this.editable[t].input.var.innerHTML=this.editable[t].slider.var.value,this.editable[t].slider.var.oninput=()=>{this.editable[t].input.var.value=this.editable[t].slider.var.value};document.getElementById("submitChange").addEventListener("click",this.bodyEdit)}else{let i=`<h2 id="planetInfo">Planet Info</h2>\n                <h3 id="planetName">Name: ${this.bodyName}</h3>\n                <p id="planet type">Type: ${this.bodyType}</p>\n                <h4 id="planetPhysicalInfo">Physical Info:</h4>\n                <p id="planetComposition">Composition: ${this.bodyComposition}</p>\n                <p id="planetTemperature">Temperature: ${this.bodyTemperature}</p>\n                <p id="planetSizeEarths">Size (Relative to Earth): ${this.bodyRadius/o}</p>\n                <p id="planetMassKg">Mass (Kg): ${this.bodyMass}</p>\n                <p id="planetMassEarths">Earth Masses: ${this.bodyMass/a}</p>\n                <p id="planetG">Gravity: ${this.bodyGravity}</p>\n                <h4 id="orbitalInfo">Orbital Info:</h4>\n                <p id="semiMajorAxis">SemiMajorAxis: ${this.bodySemiMajorAxis}</p>\n                <p id="semiMajorAxisAU">SemiMajorAxisAU: ${this.bodySemiMajorAxisAU}</p>\n                <p id="orbitalPeriod">Orbital Period (Earth Days): ${this.bodyOrbitalPeriod}</p>\n                <p>Apoapsis: ${this.bodyApoapsis}</p>\n                <p>Periapsis: ${this.bodyPeriapsis}</p>\n                <p>CUR ECC: ${this.eccentricity}</p>\n                <p>CUR DIST: ${Math.floor(this.currBodyDistance*t)}</p>\n                <p>CURR TEMP: ${Math.floor(this.bodyCurrTemp)}</p>\n                <p>CURR SPD: ${Math.floor(this.currBodySpeed)}</p>`;j.innerHTML=i}}update(){this.selected?this.display.filters[0].outerStrength=5:this.display.filters[0].outerStrength=0}bodyEdit(){this.editable;let t={curr:{stagedSMA:this.bodySemiMajorAxis,stagedSMAAU:this.bodySemiMajorAxisAU,stagedName:this.bodyName,stagedRadius:this.bodyRadius,stagedEcc:this.eccentricity,stagedTemp:this.bodyTemperature,stagedType:this.bodyType},changes:this.editable};axios.post(q+"/api/edit",t).then((t=>{console.log(t.data)})).catch((t=>{console.log("bodyEdit had "+t)}))}}let tt=new class{constructor(){let e=n(1,1e4)/100;for(let t=0;t<_.length;t++)if(e<=_[t].frequency){this.temperature=5700,this.starMass=1;break}this.starRadius=m(this.starMass),this.starKmRadius=this.starRadius*s,this.starKgMass=this.starMass*i,this.starLuminosity=b(this.temperature),this.starClass=M(this.temperature),this.starHabitableZone=u(this.temperature,this.starRadius*s),this.starDiv=document.getElementById("star"),this.starDiv.addEventListener("click",Q);let a={tempColor:this.temperature};axios.post(q+"/api/starColor",a).then((i=>{this.starColor=i.data.starColor,this.starColorHex=i.data.starColorHex,this.starColorNum=i.data.starColorNum,this.starDisplayRadius=109.1979281117564*this.starRadius*G/X,this.hZRadiusClose=this.starHabitableZone[0]/t*G*X,this.hZRadiusFar=this.starHabitableZone[1]/t*G*X,this.display=new PIXI.Graphics,this.display.lineStyle(0),this.display.beginFill(this.starColor),this.display.drawCircle(500,500,this.starDisplayRadius),this.display.endFill(),z.stage.addChild(this.display),this.displayHZFar=new PIXI.Graphics,this.displayHZFar.lineStyle(1,this.starColorNum),this.displayHZFar.drawCircle(500,500,this.hZRadiusFar),this.displayHZFar.endFill(),z.stage.addChild(this.displayHZFar),this.displayHZClose=new PIXI.Graphics,this.displayHZClose.lineStyle(1,this.starColorNum),this.displayHZClose.drawCircle(500,500,this.hZRadiusClose),this.displayHZClose.endFill(),z.stage.addChild(this.displayHZClose),this.starDiv.style.backgroundColor=this.starColorHex})).catch((t=>{console.log(t)}));let o={sendStarTemp:this.temperature,sendStarRadius:this.starRadius,sendStarMass:this.starMass,sendStarLum:this.starLuminosity};axios.post(q+"/api/starAdd/",o).then((t=>{console.log(t.data)})).catch((t=>{console.log(t)}))}showStarStats(){let i=`<h2 id="planetInfo">Planet Info</h2>\n            <p>Type: ${this.starClass}</pid=>\n            <h4>Physical Info:</h4>\n            <p>Composition: TODO</pid=>\n            <p>Temperature: ${this.temperature}</pid=>\n            <p>Size (Relative to Sol): ${this.starRadius}</p>\n            <p>Mass (relative to Sol): ${this.starMass}</p>\n            <p>Luminosity (relative to Sol): ${this.starLuminosity}</p>\n            <p>masstotal = TODO</p>\n            <p>Gravity: ${this.bodyGravity}</pid=>\n            <h4>Orbital Info:</h4>\n            <p>Habitable Zone (near): ${this.starHabitableZone[0]}</p>\n            <p>Habitable Zone (far): ${this.starHabitableZone[1]}</p>\n            <p>Habitable Zone (near AU): ${this.starHabitableZone[0]/t}</p>\n            <p>Habitable Zone (far AU): ${this.starHabitableZone[1]/t}</p>`;j.innerHTML=i}};function it(t){this.data=t.data,this.alpha=.5,this.dragging=!0}function et(){this.alpha=1,this.dragging=!1,this.data=null}function st(){if(this.dragging){const t=this.data.getLocalPosition(this.parent);this.x=t.x,this.y=t.y}}function at(t,i){let e=[];for(let s=0;s<t;s++)e.push(new W(i)),R.push(e[s]);return e}E.addEventListener("click",(function(){at(1,tt)})),$.addEventListener("click",(function(){H++})),L.addEventListener("click",(function(){H--})),O.addEventListener("click",(function(){at(1e3,tt)})),k.addEventListener("click",(function(){Y(),K=!0})),U.addEventListener("click",(function(){K=!1;for(let t=0;t<R.length;t++)R[t].selected;V()})),function(){let t=null;t=setInterval((function(){for(let i=0;i<R.length;i++)1===R[i].bodyXPosition?clearInterval(t):(K||R[i].updateLocation(),R[i].update())}),5)}(),at(15,tt),z.start()})()})();